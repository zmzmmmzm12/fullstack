{"ast":null,"code":"import { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/userReducer';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); //서버가 없으니까 아래는 주석처리\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //API실행 후 서버 요청 실패 시 이부분 실행\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //const result=yield call(logOutAPI); \n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000); //const result=yield call(signUpAPI); \n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, SignUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/user.js"],"names":["all","call","fork","takeLatest","put","delay","axios","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","post","data","logIn","action","type","err","error","response","watchLogIn","logOutAPI","logOut","watchLogOut","signUpAPI","signUp","watchSignUp","SignUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAkCC,GAAlC,EAAuCC,KAAvC,QAAmD,oBAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEoBC,eAFpB,EAEoCC,eAFpC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGqCC,eAHrC,QAIM,yBAJN;;AAMA,SAASC,QAAT,GAAmB;AACf,SAAOV,KAAK,CAACW,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACH;;AACD,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACpB,MAAG;AACF,UAAMf,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;AACA;;AACA,UAAMD,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEd,cADA;AAENW,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIA,GARD,CASA,OAAMI,GAAN,EAAU;AAAE;AACX,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEZ,cADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIA;AACH;;AACD,UAAUO,UAAV,GAAsB;AAClB,QAAMtB,UAAU,CAACK,cAAD,EAAiBW,KAAjB,CAAhB;AACH;;AAED,SAASO,SAAT,GAAoB;AAChB,SAAOpB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,UAAUU,MAAV,GAAkB;AACf,MAAG;AACF,UAAMtB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMD,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAET;AADA,KAAD,CAAT;AAGA,GAND,CAOA,OAAMU,GAAN,EAAU;AACT,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEX,eADA;AAENa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIA;AACH;;AACD,UAAUU,WAAV,GAAuB;AACnB,QAAMzB,UAAU,CAACQ,eAAD,EAAkBgB,MAAlB,CAAhB;AACH;;AAED,SAASE,SAAT,GAAoB;AAChB,SAAOvB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,UAAUa,MAAV,GAAkB;AACf,MAAG;AACF,UAAMzB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMD,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGA,GAND,CAOA,OAAMO,GAAN,EAAU;AACT,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAER,eADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIA;AACH;;AACD,UAAUa,WAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACW,eAAD,EAAkBkB,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUC,QAAV,GAAoB;AAC/B,QAAMjC,GAAG,CAAC,CACNE,IAAI,CAACuB,UAAD,CADE,EAENvB,IAAI,CAAC0B,WAAD,CAFE,EAGN1B,IAAI,CAAC6B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all,call,fork, takeLatest,put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE,\r\n    LOG_OUT_FAILURE,LOG_OUT_REQUEST,LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST,SIGN_UP_SUCCESS\r\n}from '../reducers/userReducer';\r\n\r\nfunction logInAPI(){\r\n    return axios.post('/api/login', data);\r\n}\r\nfunction* logIn(action){\r\n   try{\r\n    yield delay(1000);\r\n    //서버가 없으니까 아래는 주석처리\r\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\r\n    yield put({\r\n        type: LOG_IN_SUCCESS,\r\n        data: action.data\r\n    })\r\n   }\r\n   catch(err){ //API실행 후 서버 요청 실패 시 이부분 실행\r\n    yield put({\r\n        type: LOG_IN_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\nfunction* logOut(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(logOutAPI); \r\n    yield put({\r\n        type: LOG_OUT_SUCCESS,\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.post('/api/signup');\r\n}\r\nfunction* signUp(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(signUpAPI); \r\n    yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, SignUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}