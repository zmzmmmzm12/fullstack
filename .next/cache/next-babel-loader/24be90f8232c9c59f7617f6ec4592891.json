{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\82107\\\\Desktop\\\\\\uAC2D\\uC774\\uC5B4_\\uC0AC\\uC804\\uC900\\uBE44\\\\\\uAC15\\uC758\\uB530\\uB77C\\uD558\\uAE30\\\\\\uC6F9\\uAC8C\\uC784\\uC744 \\uB9CC\\uB4E4\\uBA70 \\uBC30\\uC6B0\\uB294 \\uB9AC\\uC561\\uD2B8\\\\fullStack\\\\front\\\\pages\\\\index.js\";\nimport AppLayout from \"../components/AppLayout\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { useEffect } from \"react\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/postReducer\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => state.userReducer.isLoggedIn); //위아래 둘다 최적화부분만 빼면 똑같은 소스임\n\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.postReducer.mainPosts);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if (hasMorePost) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }; //add해주면 항상 리턴해서 remove필요\n  }, [hasMorePost]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [isLoggedIn && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 26\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 36\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/pages/index.js"],"names":["AppLayout","useDispatch","useSelector","PostCard","PostForm","useEffect","LOAD_POSTS_REQUEST","Home","dispatch","isLoggedIn","state","userReducer","mainPosts","hasMorePost","postReducer","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","post","id"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;;AAEA,MAAMC,IAAI,GAAE,MAAI;AACZ,QAAMC,QAAQ,GAACP,WAAW,EAA1B;AACA,QAAMQ,UAAU,GAACP,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACC,WAAN,CAAkBF,UAA5B,CAA5B,CAFY,CAEyD;;AACrE,QAAM;AAACG,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAyBX,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACI,WAAN,CAAkBF,SAA5B,CAA1C;AAEAP,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAJQ,EAIN,EAJM,CAAT;AAOAD,EAAAA,SAAS,CAAC,MAAI;AACV,aAASW,QAAT,GAAmB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA2BC,QAAQ,CAACC,eAAT,CAAyBC,YAApD,EAAiEF,QAAQ,CAACC,eAAT,CAAyBE,YAA1F;;AACA,UAAGL,MAAM,CAACC,OAAP,GAAeC,QAAQ,CAACC,eAAT,CAAyBC,YAAxC,KAAuDF,QAAQ,CAACC,eAAT,CAAyBE,YAAnF,EAAgG;AAC5F,YAAGX,WAAH,EAAe;AACXL,UAAAA,QAAQ,CAAC;AACLO,YAAAA,IAAI,EAAET;AADD,WAAD,CAAR;AAGH;AACJ;AACJ;;AACDa,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAiCT,QAAjC;AACA,WAAO,MAAI;AACPG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAoCV,QAApC;AACH,KAFD,CAZU,CAcR;AACL,GAfQ,EAeN,CAACH,WAAD,CAfM,CAAT;AAkBA,sBACI,QAAC,SAAD;AAAA,eACKJ,UAAU,iBAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADjB,EAEKG,SAAS,CAACe,GAAV,CAAeC,IAAD,iBAAQ,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,YAAtB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApCD;;AAsCA,eAAetB,IAAf","sourcesContent":["import AppLayout from \"../components/AppLayout\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { useEffect } from \"react\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/postReducer\";\r\n\r\nconst Home= ()=>{\r\n    const dispatch=useDispatch();\r\n    const isLoggedIn=useSelector((state)=>state.userReducer.isLoggedIn); //위아래 둘다 최적화부분만 빼면 똑같은 소스임\r\n    const {mainPosts, hasMorePost}=useSelector((state)=>state.postReducer.mainPosts);\r\n    \r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST\r\n        })\r\n    }, []);\r\n\r\n\r\n    useEffect(()=>{\r\n        function onScroll(){\r\n            console.log(window.scrollY,document.documentElement.clientHeight,document.documentElement.scrollHeight)\r\n            if(window.scrollY+document.documentElement.clientHeight===document.documentElement.scrollHeight){\r\n                if(hasMorePost){\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll',onScroll);\r\n        return ()=>{\r\n            window.removeEventListener('scroll',onScroll);\r\n        } //add해주면 항상 리턴해서 remove필요\r\n    }, [hasMorePost]);\r\n    \r\n\r\n    return(\r\n        <AppLayout>\r\n            {isLoggedIn&&<PostForm/>}\r\n            {mainPosts.map((post)=><PostCard key={post.id} post={post}/>)}\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}