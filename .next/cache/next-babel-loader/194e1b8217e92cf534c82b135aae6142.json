{"ast":null,"code":"import { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('./api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); //const result=yield call(addPostAPI, action.data);\n\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/post.js"],"names":["all","call","fork","takeLatest","put","delay","axios","addPostAPI","data","post","addPost","action","type","result","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAmCC,GAAnC,EAAwCC,KAAxC,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACtB,MAAG;AACF,UAAMN,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIA,GAPD,CAQA,OAAMM,GAAN,EAAU;AACT,UAAMV,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIA;AACH;;AACD,UAAUQ,YAAV,GAAwB;AACpB,QAAMb,UAAU,CAAC,kBAAD,EAAqBO,OAArB,CAAhB;AACH;;AAED,eAAe,UAAUO,QAAV,GAAoB;AAC/B,QAAMjB,GAAG,CAAC,CACNE,IAAI,CAACc,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {all,call,fork, takeLatest, put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('./api/post',data);\r\n}\r\nfunction* addPost(action){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(addPostAPI, action.data);\r\n    yield put({\r\n        type: 'ADD_POST_SUCCESS',\r\n        data: result.data\r\n    })\r\n   }\r\n   catch(err){ \r\n    yield put({\r\n        type: 'ADD_POST_FAILURE',\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}