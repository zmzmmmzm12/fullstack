{"ast":null,"code":"import { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_REQUEST, UNFOLLOW_FAILURE, UNFOLLOW_SUCCESS } from '../reducers/userReducer';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); //서버가 없으니까 아래는 주석처리\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //API실행 후 서버 요청 실패 시 이부분 실행\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //const result=yield call(logOutAPI); \n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000); //const result=yield call(signUpAPI); \n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); //const result=yield call(followAPI); \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unFollow(action) {\n  try {\n    yield delay(1000); //const result=yield call(followAPI); \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/user.js"],"names":["all","call","fork","takeLatest","put","delay","axios","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_REQUEST","UNFOLLOW_FAILURE","UNFOLLOW_SUCCESS","logInAPI","post","data","logIn","action","type","err","error","response","watchLogIn","logOutAPI","logOut","watchLogOut","signUpAPI","signUp","watchSignUp","followAPI","follow","watchFollow","unfollowAPI","unFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import {all,call,fork, takeLatest,put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE,\r\n    LOG_OUT_FAILURE,LOG_OUT_REQUEST,LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST,SIGN_UP_SUCCESS,\r\n    FOLLOW_FAILURE, FOLLOW_REQUEST,FOLLOW_SUCCESS,\r\n    UNFOLLOW_REQUEST,UNFOLLOW_FAILURE,UNFOLLOW_SUCCESS\r\n}from '../reducers/userReducer';\r\n\r\nfunction logInAPI(){\r\n    return axios.post('/api/login', data);\r\n}\r\nfunction* logIn(action){\r\n   try{\r\n    yield delay(1000);\r\n    //서버가 없으니까 아래는 주석처리\r\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\r\n    yield put({\r\n        type: LOG_IN_SUCCESS,\r\n        data: action.data\r\n    })\r\n   }\r\n   catch(err){ //API실행 후 서버 요청 실패 시 이부분 실행\r\n    yield put({\r\n        type: LOG_IN_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\nfunction* logOut(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(logOutAPI); \r\n    yield put({\r\n        type: LOG_OUT_SUCCESS,\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.post('/api/signup');\r\n}\r\nfunction* signUp(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(signUpAPI); \r\n    yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction followAPI(){\r\n    return axios.post('/api/follow');\r\n}\r\nfunction* follow(action){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(followAPI); \r\n    yield put({\r\n        type: FOLLOW_SUCCESS,\r\n        data:action.data\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: FOLLOW_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction unfollowAPI(){\r\n    return axios.post('/api/unfollow');\r\n}\r\nfunction* unFollow(action){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(followAPI); \r\n    yield put({\r\n        type: UNFOLLOW_SUCCESS,\r\n        data:action.data\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: UNFOLLOW_FAILURE,\r\n        error: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unFollow);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}