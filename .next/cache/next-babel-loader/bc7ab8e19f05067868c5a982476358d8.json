{"ast":null,"code":"import { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); //서버가 없으니까 아래는 주석처리\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    //API실행 후 서버 요청 실패 시 이부분 실행\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //const result=yield call(logOutAPI); \n\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/user.js"],"names":["all","call","fork","takeLatest","put","delay","axios","logInAPI","post","data","logIn","action","type","err","response","watchLogIn","logOutAPI","logOut","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAkCC,GAAlC,EAAuCC,KAAvC,QAAmD,oBAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACH;;AACD,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACpB,MAAG;AACF,UAAMN,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;AACA;;AACA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENH,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIA,GARD,CASA,OAAMI,GAAN,EAAU;AAAE;AACX,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENH,MAAAA,IAAI,EAAEI,GAAG,CAACC,QAAJ,CAAaL;AAFb,KAAD,CAAT;AAIA;AACH;;AACD,UAAUM,UAAV,GAAsB;AAClB,QAAMZ,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB;AACH;;AAED,SAASM,SAAT,GAAoB;AAChB,SAAOV,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,UAAUS,MAAV,GAAkB;AACf,MAAG;AACF,UAAMZ,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGA,GAND,CAOA,OAAMC,GAAN,EAAU;AACT,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENH,MAAAA,IAAI,EAAEI,GAAG,CAACC,QAAJ,CAAaL;AAFb,KAAD,CAAT;AAIA;AACH;;AACD,UAAUS,WAAV,GAAuB;AACnB,QAAMf,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAMnB,GAAG,CAAC,CACNE,IAAI,CAACa,UAAD,CADE,EAENb,IAAI,CAACgB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all,call,fork, takeLatest,put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI(){\r\n    return axios.post('/api/login', data);\r\n}\r\nfunction* logIn(action){\r\n   try{\r\n    yield delay(1000);\r\n    //서버가 없으니까 아래는 주석처리\r\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\r\n    yield put({\r\n        type: 'LOG_IN_SUCCESS',\r\n        data: action.data\r\n    })\r\n   }\r\n   catch(err){ //API실행 후 서버 요청 실패 시 이부분 실행\r\n    yield put({\r\n        type: 'LOG_IN_FAILURE',\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\nfunction* logOut(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(logOutAPI); \r\n    yield put({\r\n        type: 'LOG_OUT_SUCCESS',\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: 'LOG_OUT_FAILURE',\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}