{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {},\n  post: {}\n}; //이전상태, action을 통해 다음상태를 만들어내는 함수\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/reducers/rootReducer.js"],"names":["HYDRATE","initialState","user","post","rootReducer","state","action","type","payload","isLoggedIn","data"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,IAAI,EAAC,EADU;AAIfC,EAAAA,IAAI,EAAC;AAJU,CAAnB,C,CAUA;;AACA,MAAMC,WAAW,GAAC,CAACC,KAAK,GAACJ,YAAP,EAAoBK,MAApB,KAA6B;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,OAAL;AACI,6CAAUK,KAAV,GAAmBC,MAAM,CAACE,OAA1B;;AACJ,SAAK,QAAL;AACI,6CACOH,KADP;AAEIH,QAAAA,IAAI,kCACGG,KAAK,CAACH,IADT;AAEAO,UAAAA,UAAU,EAAC,IAFX;AAGAP,UAAAA,IAAI,EAAEI,MAAM,CAACI;AAHb;AAFR;;AAQA,SAAK,SAAL;AACI,6CACOL,KADP;AAEIH,QAAAA,IAAI,kCACGG,KAAK,CAACH,IADT;AAEAO,UAAAA,UAAU,EAAC,KAFX;AAGAP,UAAAA,IAAI,EAAE;AAHN;AAFR;;AAQJ;AACI,aAAOG,KAAP;AAtBZ;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\r\n\r\nconst initialState={\r\n    user:{\r\n\r\n    },\r\n    post:{\r\n        \r\n    }\r\n}\r\n\r\n\r\n//이전상태, action을 통해 다음상태를 만들어내는 함수\r\nconst rootReducer=(state=initialState,action)=>{\r\n    switch(action.type){\r\n        case HYDRATE:\r\n            return{...state,...action.payload }\r\n        case 'LOG_IN':\r\n            return{\r\n                ...state,\r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn:true,\r\n                    user: action.data\r\n                }\r\n            }\r\n            case 'LOG_OUT':\r\n                return{\r\n                    ...state,\r\n                    user:{\r\n                        ...state.user,\r\n                        isLoggedIn:false,\r\n                        user: null\r\n                    }\r\n                }\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}