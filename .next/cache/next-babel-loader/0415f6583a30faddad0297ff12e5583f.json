{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS'\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/user.js"],"names":["logIn","watchLogIn","logOut","watchLogOut","userSaga","all","call","fork","takeLatest","put","delay","axios","logInAPI","post","data","action","type","response","logOutAPI"],"mappings":";;oDAMUA,K;qDAiBAC,U;qDAOAC,M;qDAeAC,W;qDAIeC,Q;;AAjDzB,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAkCC,GAAlC,EAAuCC,KAAvC,QAAmD,oBAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACH;;AACD,SAAUd,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAML,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAKI,iBAAMD,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,gBADA;AAENF,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAML,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,gBADA;AAENF,YAAAA,IAAI,EAAE,YAAIG,QAAJ,CAAaH;AAFb,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAAC,gBAAD,EAAmBR,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASkB,SAAT,GAAoB;AAChB,SAAOP,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,SAAUX,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAII,iBAAMD,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMP,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,iBADA;AAENF,YAAAA,IAAI,EAAE,aAAIG,QAAJ,CAAaH;AAFb,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUX,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,iBAAD,EAAoBN,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all,call,fork, takeLatest,put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI(){\r\n    return axios.post('/api/login', data);\r\n}\r\nfunction* logIn(action){\r\n   try{\r\n    yield delay(1000);\r\n    //서버가 없으니까 아래는 주석처리\r\n    //const result=yield call(logInAPI, action.data); //logInAPI실행\r\n    yield put({\r\n        type: 'LOG_IN_SUCCESS',\r\n        data: action.data\r\n    })\r\n   }\r\n   catch(err){ //API실행 후 서버 요청 실패 시 이부분 실행\r\n    yield put({\r\n        type: 'LOG_IN_FAILURE',\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\nfunction* logOut(){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(logOutAPI); \r\n    yield put({\r\n        type: 'LOG_OUT_SUCCESS',\r\n    })\r\n   }\r\n   catch(err){\r\n    yield put({\r\n        type: 'LOG_OUT_FAILURE',\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}