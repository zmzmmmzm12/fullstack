{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST } from '../reducers/postReducer';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/userReducer';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('./api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate(); //const result=yield call(addPostAPI, action.data);\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"./api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('./api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate(); //const result=yield call(removePostAPI, action.data);\n\n          _context5.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context5.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: id\n          });\n\n        case 8:\n          _context5.next = 14;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/82107/Desktop/갭이어_사전준비/강의따라하기/웹게임을 만들며 배우는 리액트/fullStack/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","removePost","watchRemovePost","postSaga","all","call","fork","takeLatest","put","delay","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","action","id","generate","type","content","response","addCommentAPI","postId","removePostAPI"],"mappings":"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","sourcesContent":["import {all,call,fork, takeLatest, put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,REMOVE_POST_REQUEST\r\n} from '../reducers/postReducer';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/userReducer';\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('./api/post',data);\r\n}\r\nfunction* addPost(action){\r\n   try{\r\n    yield delay(1000);\r\n    const id=shortId.generate();\r\n    //const result=yield call(addPostAPI, action.data);\r\n    yield put({\r\n        type: ADD_POST_SUCCESS,\r\n        data:{\r\n            id,\r\n            content:action.data\r\n        }\r\n    })\r\n    yield put({\r\n        type:ADD_POST_TO_ME,\r\n        data:id\r\n    })\r\n   }\r\n   catch(err){ \r\n    yield put({\r\n        type: ADD_POST_FAILURE,\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`./api/post/${data.postId}/comment`,data);\r\n}\r\nfunction* addComment(action){\r\n   try{\r\n    yield delay(1000);\r\n    //const result=yield call(addCommentAPI, action.data);\r\n    yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: action.data\r\n    })\r\n   }\r\n   catch(err){ \r\n    yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.delete('./api/post',data);\r\n}\r\nfunction* removePost(action){\r\n   try{\r\n    yield delay(1000);\r\n    const id=shortId.generate();\r\n    //const result=yield call(removePostAPI, action.data);\r\n    yield put({\r\n        type: REMOVE_POST_SUCCESS,\r\n        data:{\r\n            id,\r\n            content:action.data\r\n        }\r\n    })\r\n    yield put({\r\n        type:REMOVE_POST_OF_ME,\r\n        data:id\r\n    })\r\n   }\r\n   catch(err){ \r\n    yield put({\r\n        type: REMOVE_POST_FAILURE,\r\n        data: err.response.data\r\n    })\r\n   }\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}